@startuml need_to_find_id
abstract class uml.UMLElement << trait >>{
    pretty : String
    structure : String
    # listStructure(umlElements : List<T>) : String
    # optionString(os : Option<String>) : String
    # optionUMLElement(oElement : Option<UMLElement>) : String
    # optionAny(oA : T) : String 

}
uml.StereotypeElement --> "[0..1]" Option : stereotype <<bind A -> String >>  > 
uml.UMLElement <|-- uml.StereotypeElement 
abstract class uml.UMLElement << trait >>
abstract class uml.StereotypeElement << trait >>
uml.UMLElement <|-- uml.TopLevelElement 
abstract class uml.TopLevelElement << trait >>
uml.UMLElement <|-- uml.CompartmentElement 
abstract class uml.CompartmentElement << trait >>
uml.UMLElement <|-- uml.PackageBodyElement 
abstract class uml.PackageBodyElement << trait >>
uml.UMLElement <|-- uml.RelateableElement 
abstract class uml.RelateableElement << trait >>
uml.NamedElement --> "1" uml.String : identifier   > 
uml.NamedElement --> "1" scalameta::util::namespaces.Entry : namespace   > 
uml.UMLElement <|-- uml.NamedElement 
abstract class uml.NamedElement << trait >>
class uml.UMLUnit << caseclass >>{
    << constr >>UMLUnit(identifier : String,  toplevelElements : List<TopLevelElement>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.UMLElement <|-- uml.UMLUnit 
class uml.Package << caseclass >>{
    << constr >>Package(identifier : String,  packageBodyElements : List<PackageBodyElement>,  stereotype : Option<String>,  namespace : Entry) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.TopLevelElement <|-- uml.Package 
abstract class uml.TopLevelElement << trait >>
uml.PackageBodyElement <|-- uml.Package 
abstract class uml.PackageBodyElement << trait >>
uml.StereotypeElement <|-- uml.Package 
abstract class uml.StereotypeElement << trait >>
uml.NamedElement <|-- uml.Package 
abstract class uml.NamedElement << trait >>
uml.RelateableElement <|-- uml.Package 
abstract class uml.RelateableElement << trait >>
class uml.GenericParameter << caseclass >>{
    << constr >>GenericParameter(identifier : String,  concreteType : Option<String>,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.StereotypeElement <|-- uml.GenericParameter 
uml.NamedElement <|-- uml.GenericParameter 
abstract class uml.AccessModifier << trait >>
class uml.Private << caseobject >>
uml.AccessModifier <|-- uml.Private 
abstract class uml.AccessModifier << trait >>
class uml.Protected << caseobject >>
uml.AccessModifier <|-- uml.Protected 
class uml.PackagePrivate << caseobject >>
uml.AccessModifier <|-- uml.PackagePrivate 
class uml.Public << caseobject >>
uml.AccessModifier <|-- uml.Public 
abstract class uml.Modificator << trait >>
class uml.Static << caseobject >>
uml.Modificator <|-- uml.Static 
abstract class uml.Modificator << trait >>
class uml.Abstract << caseobject >>
uml.Modificator <|-- uml.Abstract 
class uml.externalReferences << object >>
uml.externalReferences +-- uml.ClassType 
abstract class uml.ClassType << trait >>
class uml.Trait << caseobject >>
uml.ClassType <|-- uml.Trait 
class uml.ClassType 
uml.externalReferences +-- uml.Trait 
class uml.Enum << caseobject >>
uml.ClassType <|-- uml.Enum 
uml.externalReferences +-- uml.Enum 
class uml.Object << caseobject >>
uml.ClassType <|-- uml.Object 
uml.externalReferences +-- uml.Object 
class uml.CClass << caseobject >>
uml.ClassType <|-- uml.CClass 
uml.externalReferences +-- uml.CClass 
class uml.CCaseClass << caseobject >>
uml.ClassType <|-- uml.CCaseClass 
uml.externalReferences +-- uml.CCaseClass 
class uml.ClassDefRef << caseclass >>{
    << constr >>ClassDefRef(classtype : ClassType,  name : String,  namespace : Entry,  templateParameter : List<String>,  oStat : Option<Stat>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.UMLElement <|-- uml.ClassDefRef 
uml.externalReferences +-- uml.ClassDefRef 
class uml.Class << caseclass >>{
    << constr >>Class(isAbstract : Boolean,  identifier : String,  attributes : List<Attribute>,  operations : List<Operation>,  additionalCompartements : List<Compartment>,  genericParameters : Option<List<GenericParameter>>,  stereotype : Option<String>,  namespace : Entry) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.TopLevelElement <|-- uml.Class 
uml.StereotypeElement <|-- uml.Class 
uml.PackageBodyElement <|-- uml.Class 
uml.RelateableElement <|-- uml.Class 
uml.NamedElement <|-- uml.Class 
class uml.Attribute << caseclass >>{
    << constr >>Attribute(modificators : Option<List<Modificator>>,  modifier : Option<AccessModifier>,  identifier : String,  attributeType : Option<String>,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.CompartmentElement <|-- uml.Attribute 
abstract class uml.CompartmentElement << trait >>
uml.StereotypeElement <|-- uml.Attribute 
uml.NamedElement <|-- uml.Attribute 
class uml.Parameter << caseclass >>{
    << constr >>Parameter(identifier : String,  paramType : String,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.StereotypeElement <|-- uml.Parameter 
uml.NamedElement <|-- uml.Parameter 
class uml.Operation << caseclass >>{
    << constr >>Operation(modificator : Option<List<Modificator>>,  accessModifier : Option<AccessModifier>,  identifier : String,  paramSeq : List<List<Parameter>>,  returnType : Option<String>,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.CompartmentElement <|-- uml.Operation 
uml.StereotypeElement <|-- uml.Operation 
uml.NamedElement <|-- uml.Operation 
class uml.Compartment << caseclass >>{
    << constr >>Compartment(identifier : Option<String>,  compartmentElements : List<CompartmentElement>,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.UMLElement <|-- uml.Compartment 
uml.StereotypeElement <|-- uml.Compartment 
class uml.Note << caseclass >>{
    << constr >>Note(attachedElements : List<NamedElement>,  text : String,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.TopLevelElement <|-- uml.Note 
uml.StereotypeElement <|-- uml.Note 
uml.PackageBodyElement <|-- uml.Note 
abstract class uml.RelationshipType << trait >>
class uml.Extension << caseobject >>
uml.RelationshipType <|-- uml.Extension 
abstract class uml.RelationshipType << trait >>
class uml.Composition << caseobject >>
uml.RelationshipType <|-- uml.Composition 
class uml.Aggregation << caseobject >>
uml.RelationshipType <|-- uml.Aggregation 
class uml.Annotation << caseobject >>
uml.RelationshipType <|-- uml.Annotation 
class uml.Association << caseobject >>
uml.RelationshipType <|-- uml.Association 
class uml.Inner << caseobject >>
uml.RelationshipType <|-- uml.Inner 
abstract class uml.RelationshipDirection << trait >>
class uml.FromTo << caseobject >>
uml.RelationshipDirection <|-- uml.FromTo 
abstract class uml.RelationshipDirection << trait >>
class uml.ToFrom << caseobject >>
uml.RelationshipDirection <|-- uml.ToFrom 
class uml.Without << caseobject >>
uml.RelationshipDirection <|-- uml.Without 
uml.UMLElement <|-- uml.RelationshipElement 
abstract class uml.RelationshipElement << trait >>
class uml.ConcreteClass << caseclass >>{
    << constr >>ConcreteClass(cls : &<TypeNameCollector(RelateableElement),TypeNameCollector(NamedElement)>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.RelationshipElement <|-- uml.ConcreteClass 
abstract class uml.RelationshipElement << trait >>
class uml.ClassRef << caseclass >>{
    << constr >>ClassRef(name : String,  namespace : Entry) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.RelationshipElement <|-- uml.ClassRef 
class uml.RelationshipInfo << caseclass >>{
    << constr >>RelationshipInfo(sourceMultiplicity : Option<String>,  targetMultiplicity : Option<String>,  from : RelationshipElement,  to : RelationshipElement,  relationshipIdentifier : Option<String>,  identifierDirection : RelationshipDirection) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.UMLElement <|-- uml.RelationshipInfo 
class uml.Relationship << caseclass >>{
    << constr >>Relationship(relationshipType : RelationshipType,  relationshipDirection : RelationshipDirection,  relationshipInfo : RelationshipInfo,  stereotype : Option<String>) 
    structure : String 
-- <<ScalaClass>> --
    isSealed 
}
uml.TopLevelElement <|-- uml.Relationship 
uml.PackageBodyElement <|-- uml.Relationship 
uml.StereotypeElement <|-- uml.Relationship 

skinparam linetype ortho
@enduml