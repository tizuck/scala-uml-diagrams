@startuml need_to_find_id
package uml{
    class uml.umlMethods << object >>{
        distinctRep : State<UMLElement,Unit> 
        toExternalAssociationsRep : State<UMLElement,Tuple2<List<RelationshipElement>,List<RelationshipElement>>> 
         : State 
         : State 
        - startState< T > (start : T) : State<UMLElement,T>
        - nextRewriteState< T > (start : T) (rewriteStrategy : RewriteStrategy<T>) : State<UMLElement,T>
        - nextCollectState< T > (start : T) (collectStrategy : CollectStrategy<T>) : State<UMLElement,T>
        - classesAndCompanion (allClasses : List<Class>) 
        exclude (umlElement : UMLElement,  regex : Regex) : Eval<UMLElement>
        toPackageRep (umlElement : UMLElement) : Eval<UMLElement>
        insertCompanionObjects (umlUnit : UMLUnit) : Eval<UMLUnit>
        toDistinctRep (umlElement : UMLElement) : Eval<UMLElement>
        toAssocRep (umlElement : UMLElement) : Eval<UMLElement> 
    
    }
    class uml.Relationship << caseclass >>{
        << ctor >>Relationship (relationshipType : RelationshipType,  relationshipDirection : RelationshipDirection,  relationshipInfo : RelationshipInfo,  stereotype : List<Stereotype>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Relationship>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.RelationshipInfo << caseclass >>{
        << ctor >>RelationshipInfo (sourceMultiplicity : Option<String>,  targetMultiplicity : Option<String>,  from : RelationshipElement,  to : RelationshipElement,  relationshipIdentifier : Option<String>,  identifierDirection : RelationshipDirection,  originType : ClassType) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<RelationshipInfo>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.PackageRef << caseclass >>{
        toString 
        << ctor >>PackageRef (namespace : NamespaceEntry) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<PackageRef>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.ClassRef << caseclass >>{
        << ctor >>ClassRef (name : String,  namespace : Entry) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<ClassRef>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.ConcreteClass << caseclass >>{
        << ctor >>ConcreteClass (cls : Class) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<ConcreteClass>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.RelationshipElement << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    class uml.Without << caseobject >>
    class uml.ToFrom << caseobject >>
    class uml.FromTo << caseobject >>
    abstract class uml.RelationshipDirection << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    class uml.Inner << caseobject >>
    class uml.Association << caseobject >>
    class uml.Annotation << caseobject >>
    class uml.Aggregation << caseobject >>
    class uml.Composition << caseobject >>
    class uml.Realization << caseobject >>
    class uml.Extension << caseobject >>
    abstract class uml.RelationshipType << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    class uml.Compartment << caseclass >>{
        << ctor >>Compartment (identifier : Option<String>,  taggedValues : List<TaggedValue>,  stereotype : List<Stereotype>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Compartment>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.Operation << caseclass >>{
        << ctor >>Operation (modificator : Option<List<Modificator>>,  accessModifier : Option<AccessModifier>,  name : String,  paramSeq : List<List<Parameter>>,  returnType : Option<String>,  stereotype : List<Stereotype>,  templateParameter : Option<List<GenericParameter>>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Operation>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.Parameter << caseclass >>{
        << ctor >>Parameter (name : String,  paramType : String,  stereotype : List<Stereotype>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Parameter>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.Attribute << caseclass >>{
        << ctor >>Attribute (modificators : Option<List<Modificator>>,  modifier : Option<AccessModifier>,  name : String,  attributeType : Option<String>,  stereotype : List<Stereotype>,  defaultValue : Option<String>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Attribute>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.Class << caseclass >>{
        << ctor >>Class (isAbstract : Boolean,  name : String,  attributes : List<Attribute>,  operations : List<Operation>,  additionalCompartements : List<Compartment>,  genericParameters : Option<List<GenericParameter>>,  stereotype : List<Stereotype>,  namespace : Entry) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Class>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.externalReferences << object >>
    class uml.Abstract << caseobject >>
    class uml.Static << caseobject >>
    abstract class uml.Modificator << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    class uml.Public << caseobject >>
    class uml.PackagePrivate << caseobject >>
    class uml.Protected << caseobject >>
    class uml.Private << caseobject >>
    abstract class uml.AccessModifier << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    class uml.GenericParameter << caseclass >>{
        << ctor >>GenericParameter (name : String,  concreteType : Option<String>,  stereotype : List<Stereotype>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<GenericParameter>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.Package << caseclass >>{
        << ctor >>Package (packageBodyElements : List<PackageBodyElement>,  stereotype : List<Stereotype>,  namespace : Entry) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Package>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.UMLUnit << caseclass >>{
        << ctor >>UMLUnit (name : String,  toplevelElements : List<TopLevelElement>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<UMLUnit>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.Stereotype << caseclass >>{
        << ctor >>Stereotype (name : String,  taggedValues : List<TaggedValue>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<Stereotype>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml.TaggedValue << caseclass >>{
        << ctor >>TaggedValue (name : String,  value : Option<String>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<TaggedValue>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.NamedElement << trait >>{
        name : String 
         -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.PackageBodyElement << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.CompartmentElement << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.TopLevelElement << trait >>{
        namespace : Entry 
         -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.StereotypeElement << trait >>{
        stereotype : List<Stereotype> 
         -- <<scalaclass>> --
        isSealed
    }
    abstract class uml.UMLElement << trait >>{
        pretty (<< implicit >>pretty : PrettyPrinter<T>) : String
        structure  : String
        rewrite< T > (s : Func<T,Strategy>) (startState : T) (f : Func<Tuple2<UMLElement,T>,T>) : Eval<Tuple2<T,UMLElement>>
        collect< B > (pf : ==><UMLElement,B>) : List<B>
        contains< B > (elem : UMLElement) : Boolean
        count (p : Func<UMLElement,Boolean>) : Int
        map (f : ==><UMLElement,UMLElement>) : UMLElement
        forall (p : Func<UMLElement,Boolean>) : Boolean
        exists (p : Func<UMLElement,Boolean>) : Boolean
        toList () : List<UMLElement>
         {static} # accStart< T, U : HigherBound<UMLElement>  >  : State<T,List<U>>
         {static} # accInnerStart< T, U : HigherBound<UMLElement>  >  : State<T,List<List<U>>>
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
         {static} # rewriteList< T > (s : State<T,Strategy>,  f : Func<UMLElement,State<T,Unit>>,  elements : List<UMLElement>) : State<T,List<UMLElement>>
         {static} # rewriteListList< T > (s : State<T,Strategy>,  f : Func<UMLElement,State<T,Unit>>,  elementss : List<List<UMLElement>>) : State<T,List<List<UMLElement>>>
        # rewriteOptionList< T > (s : State<T,Strategy>,  f : Func<UMLElement,State<T,Unit>>,  option : Option<List<UMLElement>>) : State<T,Option<List<UMLElement>>>
        # listStructure< T : HigherBound<UMLElement>  > (umlElements : List<T>) : String
        # optionString (os : Option<String>) : String
        # optionUMLElement (oElement : Option<UMLElement>) : String
        # optionAny< T > (oA : T) : String 
    -- <<scalaclass>> --
        isSealed
    }
}
package uml::externalReferences{
    class uml::externalReferences.ClassDefRef << caseclass >>{
        << ctor >>ClassDefRef (classtype : ClassType,  name : String,  namespace : Entry,  templateParameter : List<String>,  oStat : Option<Stat>) 
        structure  : String
        rewrite< T > (s : State<T,Strategy>) (f : Func<UMLElement,State<T,Unit>>) : State<T,UMLElement>
        pretty (<< implicit >>pretty : PrettyPrinter<ClassDefRef>) : String 
    -- <<scalaclass>> --
        isSealed
    }
    class uml::externalReferences.CCaseClass << caseobject >>
    class uml::externalReferences.CClass << caseobject >>
    class uml::externalReferences.Object << caseobject >>
    class uml::externalReferences.Enum << caseobject >>
    class uml::externalReferences.Trait << caseobject >>
    abstract class uml::externalReferences.ClassType << trait >>{
         -- <<scalaclass>> --
        isSealed
    }
}
uml.UMLElement <|-- uml.StereotypeElement 
uml.UMLElement <|-- uml.TopLevelElement 
uml.UMLElement <|-- uml.CompartmentElement 
uml.UMLElement <|-- uml.PackageBodyElement 
uml.UMLElement <|-- uml.NamedElement 
uml.NamedElement <|-- uml.TaggedValue 
uml.NamedElement <|-- uml.Stereotype 
uml.NamedElement <|-- uml.UMLUnit 
uml.TopLevelElement <|-- uml.Package 
uml.PackageBodyElement <|-- uml.Package 
uml.StereotypeElement <|-- uml.Package 
uml.StereotypeElement <|-- uml.GenericParameter 
uml.NamedElement <|-- uml.GenericParameter 
uml.AccessModifier <|-- uml.Private 
uml.AccessModifier <|-- uml.Protected 
uml.AccessModifier <|-- uml.PackagePrivate 
uml.AccessModifier <|-- uml.Public 
uml.Modificator <|-- uml.Static 
uml.Modificator <|-- uml.Abstract 
uml::externalReferences.ClassType <|-- uml::externalReferences.Trait 
uml::externalReferences.ClassType <|-- uml::externalReferences.Enum 
uml::externalReferences.ClassType <|-- uml::externalReferences.Object 
uml::externalReferences.ClassType <|-- uml::externalReferences.CClass 
uml::externalReferences.ClassType <|-- uml::externalReferences.CCaseClass 
uml.TopLevelElement <|-- uml::externalReferences.ClassDefRef 
uml.NamedElement <|-- uml::externalReferences.ClassDefRef 
uml.TopLevelElement <|-- uml.Class 
uml.StereotypeElement <|-- uml.Class 
uml.PackageBodyElement <|-- uml.Class 
uml.NamedElement <|-- uml.Class 
uml.CompartmentElement <|-- uml.Attribute 
uml.StereotypeElement <|-- uml.Attribute 
uml.NamedElement <|-- uml.Attribute 
uml.StereotypeElement <|-- uml.Parameter 
uml.NamedElement <|-- uml.Parameter 
uml.CompartmentElement <|-- uml.Operation 
uml.StereotypeElement <|-- uml.Operation 
uml.NamedElement <|-- uml.Operation 
uml.UMLElement <|-- uml.Compartment 
uml.StereotypeElement <|-- uml.Compartment 
uml.RelationshipType <|-- uml.Extension 
uml.RelationshipType <|-- uml.Realization 
uml.RelationshipType <|-- uml.Composition 
uml.RelationshipType <|-- uml.Aggregation 
uml.RelationshipType <|-- uml.Annotation 
uml.RelationshipType <|-- uml.Association 
uml.RelationshipType <|-- uml.Inner 
uml.RelationshipDirection <|-- uml.FromTo 
uml.RelationshipDirection <|-- uml.ToFrom 
uml.RelationshipDirection <|-- uml.Without 
uml.UMLElement <|-- uml.RelationshipElement 
uml.RelationshipElement <|-- uml.ConcreteClass 
uml.RelationshipElement <|-- uml.ClassRef 
uml.RelationshipElement <|-- uml.PackageRef 
uml.UMLElement <|-- uml.RelationshipInfo 
uml.TopLevelElement <|-- uml.Relationship 
uml.PackageBodyElement <|-- uml.Relationship 
uml.StereotypeElement <|-- uml.Relationship 
uml.$externalReferences +-- uml::externalReferences : << objectdef >>
@enduml